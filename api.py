# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2022-06-26T11:37:44+00:00

from datetime import datetime
from http.client import HTTPException
from typing import Optional, Union
from uuid import UUID

from fastapi import FastAPI, Depends, Query
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session

from schemas import Error, ShopUnit, ShopUnitImportRequest, ShopUnitStatisticResponse
import crud, models
from database import SessionLocal, engine

models.Base.metadata.create_all(bind=engine) # TODO: implement alembir for better migrations

app = FastAPI(
    description='Вступительное задание в Летнюю Школу Бэкенд Разработки Яндекса 2022',
    title='Mega Market Open API',
    version='1.0',
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.exception_handler(RequestValidationError)
async def validation_error_handler(request, exc):
    return JSONResponse(status_code=400, content=Error(code=400, message="Validation Failed").__dict__)

@app.exception_handler(StarletteHTTPException)
async def validation_error_handler(request, exc):
    return JSONResponse(status_code=404, content=Error(code=404, message="Item not found").__dict__)

@app.delete(
    '/delete/{id}',
    response_model=None,
    responses={'400': {'model': Error}, '404': {'model': Error}})
def delete_id(id: UUID, db: Session = Depends(get_db)) -> Union[None, Error]:
    crud.delete_item(db, id)



@app.post('/imports', response_model=None, responses={'400': {'model': Error}, '422': {'model': Error}}, status_code=200)
def post_imports(body: ShopUnitImportRequest = None, db: Session = Depends(get_db)) -> Union[None, Error]:
    crud.create_or_update_items(db, body)


@app.get(
    '/node/{id}/statistic',
    response_model=ShopUnitStatisticResponse,
    responses={'400': {'model': Error}, '404': {'model': Error}},
)
def get_node_id_statistic(
    id: UUID,
    date_start: Optional[datetime] = Query(None, alias='dateStart'),
    date_end: Optional[datetime] = Query(None, alias='dateEnd'),
    db: Session = Depends(get_db)) -> Union[ShopUnitStatisticResponse, Error]:
    return {"items": crud.get_item_history(db, id, date_start, date_end)}


@app.get(
    '/nodes/{id}',
    response_model=ShopUnit,
    responses={'400': {'model': Error}, '404': {'model': Error}},
)
def get_nodes_id(id: UUID, db: Session = Depends(get_db)) -> Union[ShopUnit, Error]:
    item = crud.get_item(db, id)
    if item is None:
        raise HTTPException(404)
    return item


@app.get(
    '/sales',
    response_model=ShopUnitStatisticResponse,
    responses={'400': {'model': Error}})
def get_sales(date: datetime, db: Session = Depends(get_db)) -> Union[ShopUnitStatisticResponse, Error]:
    return {"items": crud.get_sales(db, date)}
